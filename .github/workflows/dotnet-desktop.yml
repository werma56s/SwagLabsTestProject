
# For more information on GitHub Actions, refer to https://github.com/features/actions
# For a complete CI/CD sample to get started with GitHub Action workflows for Desktop Applications,
# refer to https://github.com/microsoft/github-actions-for-desktop-apps

name: CI Pipeline for SwagLabsTestProject

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Krok 1: Checkout kodu
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Start containers
        run: docker compose -f "docker-compose.yml" up -d --build
      
      # Krok 2: Zainstaluj .NET SDK
      - name: Set up .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '6.0'  # Użyj odpowiedniej wersji .NET


      # # Krok 3: Instalacja Docker i Docker Compose (przy użyciu Chocolatey)
      # - name: Install Docker and Docker Compose
      #   run: |
      #     choco install docker-desktop
      #     choco install docker-compose
      
      # #- name: Check Docker version
      # #  run: |
      # #    docker --version
      # #    docker-compose --version
      
      # - name: Enable WSL 2
      #   run: |
      #     wsl --install -d Ubuntu
      #     wsl --set-version Ubuntu 2
      #     wsl --set-default-version 2
      #   shell: powershell

      # # Krok 4: Upewnij się, że Docker jest uruchomiony
      # - name: Start Docker
      #   run: |
      #     & "C:\Program Files\Docker\Docker\Docker Desktop.exe" &
          
      # #- name: Verify WSL Installation
      # #  run: |
      # #    wsl --list --verbose
      # #  shell: powershell

       # Krok 5: Build aplikacji .NET
      - name: Build .NET application
        run: |
          dotnet restore
          dotnet build --configuration Release

      # # Krok 6: Uruchom Docker Compose w odpowiedniej ścieżce
      # - name: Start Docker Compose
      #   run: |
      #     docker compose -f SwagLabsTestProject/docker-compose.yml up

      # Krok 7: Uruchom testy
      - name: Run .NET tests
        run: |
          dotnet test

      # Krok 8: Zatrzymaj Docker Compose
      - name: Tear down Docker Compose
        run: |
          docker compose -f "docker-compose.yml" down

      # Krok 9: Sprawdź wersję Dockera i Docker Compose
      - name: Check Docker version
        run: |
          docker --version
          docker-compose --version

      # Krok 7: Przeprowadź działania na Dockerze lub wydanie, jeśli testy się powiodą
      # Możesz dodać tutaj kolejne kroki w zależności od potrzeby (np. wdrożenie)
